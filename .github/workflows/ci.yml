
name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

defaults:
  run:
    shell: bash

env:
  # Otherwise egl initialisation fails
  # In CI we don't have a display-surface to render to
  EGL_PLATFORM: surfaceless
jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - run: rustup update stable && rustup default stable
      - uses: actions/checkout@v4
      - uses: taiki-e/install-action@v2
        with: { tool: 'just' }
      - run: just env-info
      - uses: Swatinem/rust-cache@v2
      - run: just ci-lint
  test:
    name: Test ${{ matrix.runs-on }} - ${{ matrix.backend }}
    runs-on: ${{ matrix.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x86
          - runs-on: ubuntu-latest
            backend: vulkan
          - runs-on: ubuntu-latest
            backend: opengl

          # Linux ARM
          - runs-on: ubuntu-24.04-arm
            backend: vulkan
          - runs-on: ubuntu-24.04-arm
            backend: opengl

          # macOS ARM
          #- runs-on: macos-latest
          #  backend: metal
          #- runs-on: macos-latest
          #  backend: vulkan
          #- runs-on: macos-latest
          #  backend: opengl
    steps:
      - run: rustup update stable && rustup default stable
      - uses: actions/checkout@v4
      - uses: taiki-e/install-action@v2
        with: { tool: 'just' }
      - uses: Swatinem/rust-cache@v2
      - run: just env-info
      - name: Install linux dependencies
        if: startsWith(matrix.runs-on, 'ubuntu')
        run: |
          sudo apt-get update
          # Make sure this list matches README
          sudo apt-get install -y \
            build-essential \
            libcurl4-openssl-dev \
            libglfw3-dev \
            libjpeg-dev \
            libpng-dev \
            libsqlite3-dev \
            libuv1-dev \
            libwebp-dev \
            libz-dev
          if [ "${{ matrix.backend }}" = "opengl" ]; then
            sudo apt-get install -y libopengl0
          elif [ "${{ matrix.backend }}" = "vulkan" ]; then
            sudo apt-get install -y mesa-vulkan-drivers glslang-dev
          fi
      - name: Install macOS dependencies
        if: startsWith(matrix.runs-on, 'macos')
        run: |
          # Install dependencies via Homebrew
          brew install \
            curl \
            glfw \
            jpeg \
            libpng \
            sqlite \
            libuv \
            webp \
            zlib
          # For Vulkan on macOS, install MoltenVK
          if [ "${{ matrix.backend }}" = "vulkan" ]; then
            brew install molten-vk vulkan-headers
          fi
      # Regular tests
      - run: just ci-test ${{ matrix.backend }}
      - run: just test-doc ${{ matrix.backend }}
      # Test MSRV
      - name: Read MSRV
        id: msrv
        run: echo "value=$(sed -nE 's/^rust-version[[:space:]]*=[[:space:]]*"([^"]+)".*/\1/p' Cargo.toml)" >> $GITHUB_OUTPUT
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ steps.msrv.outputs.value }}
      - run: just ci-test ${{ matrix.backend }}
      # Test MIRI
      # Currently disabled due to "unsupported operation: can't call foreign function `mln$bridge$cxxbridge1$MapRenderer_new` on OS `linux`"
      # Needs reinvestigation if this can be fixed via "-Zmiri-native-lib" or maybe "-Zmiri-native-lib-enable-tracing"
      # Tracking issue upstream https://github.com/rust-lang/miri/issues/11
      # - run: |
      #     echo "NIGHTLY=nightly-$(curl -s https://rust-lang.github.io/rustup-components-history/x86_64-unknown-linux-gnu/miri)" >> "$GITHUB_ENV"
      # - name: Install ${{ env.NIGHTLY }}
      #   uses: dtolnay/rust-toolchain@master
      #   with:
      #     toolchain: ${{ env.NIGHTLY }}
      #     components: miri
      # - run: just test-miri ${{ matrix.backend }}

  # This final step is needed to mark the whole workflow as successful
  # Don't change its name - it is used by the merge protection rules
  ci-passed:
    name: CI Finished
    runs-on: ubuntu-latest
    needs: [ test, lint ]
    if: always()
    steps:
      - name: Result of the needed steps
        run: echo "${{ toJSON(needs) }}"
      - if: ${{ contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled') || contains(needs.*.result, 'skipped') }}
        name: CI Result
        run: exit 1

  # Release unpublished packages
  release-plz:
    needs: [ ci-passed ]
    if: |
      always()
      && needs.ci-passed.result == 'success'
      && github.event_name == 'push'
      && github.ref == 'refs/heads/main'
      && github.repository_owner == 'maplibre'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    concurrency:
      group: release-plz-${{ github.ref }}
      cancel-in-progress: false
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - uses: dtolnay/rust-toolchain@stable
      - name: Publish to crates.io if crate's version is newer
        uses: release-plz/action@v0.5
        id: release
        with: { command: release }
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_PLZ_TOKEN }}
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
      - name: If version is the same, create a PR proposing new version and changelog for the next release
        uses: release-plz/action@v0.5
        if: ${{ steps.release.outputs.releases_created == 'false' }}
        with: { command: release-pr }
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_PLZ_TOKEN }}
