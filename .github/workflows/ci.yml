name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]
  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  test:
    name: Test ${{ matrix.runs-on }} - ${{ matrix.backend }}
    runs-on: ${{ matrix.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x86
          - runs-on: ubuntu-latest
            backend: vulkan
          #- runs-on: ubuntu-latest
          #  backend: opengl

          # Linux ARM
          - runs-on: ubuntu-24.04-arm
            backend: vulkan
          #- runs-on: ubuntu-24.04-arm
          #  backend: opengl

          # macOS ARM
          #- runs-on: macos-latest
          #  backend: metal
          #- runs-on: macos-latest
          #  backend: vulkan
          #- runs-on: macos-latest
          #  backend: opengl
    steps:
      #######################################################################################################
      ## Full test
      ##
      - uses: actions/checkout@v4
      - uses: taiki-e/install-action@v2
        with: { tool: 'just' }
      - uses: Swatinem/rust-cache@v2
      - name: Install linux dependencies
        if: startsWith(matrix.runs-on, 'ubuntu')
        run: |
          sudo apt-get update
          # Make sure this list matches README
          sudo apt-get install -y \
            build-essential \
            libcurl4-openssl-dev \
            libglfw3-dev \
            libjpeg-dev \
            libpng-dev \
            libsqlite3-dev \
            libuv1-dev \
            libwebp-dev \
            libz-dev
          if [ "${{ matrix.backend }}" = "opengl" ]; then
            sudo apt-get install -y libopengl0 libx11-dev
          fi
          if [ "${{ matrix.backend }}" = "vulkan" ]; then
            sudo apt-get install -y mesa-vulkan-drivers glslang-dev
          fi
      - name: Install macOS dependencies
        if: startsWith(matrix.runs-on, 'macos')
        run: |
          # Install dependencies via Homebrew
          brew install \
            curl \
            glfw \
            jpeg \
            libpng \
            sqlite \
            libuv \
            webp \
            zlib
          # For Vulkan on macOS, install MoltenVK
          if [ "${{ matrix.backend }}" = "vulkan" ]; then
            brew install molten-vk vulkan-headers
          fi
      - run: just ci-test ${{ matrix.backend }}
  release:
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: taiki-e/install-action@v2
        with: { tool: 'just' }
      - if: github.event_name == 'release'
        name: Ensure this crate has not yet been published (on release)
        run: just check-if-published
      # - name: Check semver
      #   uses: obi1kenobi/cargo-semver-checks-action@v2
      #######################################################################################################
      ## Test MSRV
      ##
      # - name: Read MSRV
      #   id: msrv
      #   run: echo "value=$(sed -ne 's/rust-version *= *\"\(.*\)\"/\1/p' Cargo.toml)" >> $GITHUB_OUTPUT
      # - name: Install Rust
      #   uses: dtolnay/rust-toolchain@stable
      #   with:
      #     toolchain: ${{ steps.msrv.outputs.value }}
      # - run: just ci-test-msrv
      #######################################################################################################
      ## Publish to crates.io
      ##
      - if: github.event_name == 'push'
        run: just test-publishing
      - if: github.event_name == 'release' && startsWith(github.ref, 'refs/tags/')
        name: Publish to crates.io
        run: cargo publish
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  # This final step is needed to mark the whole workflow as successful
  # Don't change its name - it is used by the merge protection rules
  done:
    name: CI Finished
    runs-on: ubuntu-latest
    needs: [ release ]
    if: always()
    steps:
      - name: Result of the needed steps
        run: echo "${{ toJSON(needs) }}"
      - if: ${{ contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled') || contains(needs.*.result, 'skipped') }}
        name: CI Result
        run: exit 1
